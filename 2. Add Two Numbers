#include <stdio.h>
#include <stdlib.h>
struct ListNode {
    int val;
    struct ListNode *next;
};

// 函數: 創建新節點
struct ListNode* newNode(int val) {
    struct ListNode* node = (struct ListNode*)malloc(sizeof(struct ListNode));
    node->val = val;
    node->next = NULL;
    return node;
}

// 函數: 釋放鏈表節點
void freeList(struct ListNode* head) {
    struct ListNode* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

// 函數: 釋放結果列表
void freeResultList(struct ListNode* head) {
    struct ListNode* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

// 函數: 串接兩個鏈表
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* dummy = newNode(0); // 虛擬頭節點
    struct ListNode* current = dummy;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }
        carry = sum / 10;

        current->next = newNode(sum % 10);
        current = current->next;
    }

    struct ListNode* result = dummy->next;
    free(dummy);
    return result;
}

int main() {
    // 創建兩個鏈表
    struct ListNode* l1 = newNode(2);
    l1->next = newNode(4);
    l1->next->next = newNode(3);

    struct ListNode* l2 = newNode(5);
    l2->next = newNode(6);
    l2->next->next = newNode(4);

    // 執行函數
    struct ListNode* ans = addTwoNumbers(l1, l2);

    // 輸出結果
    printf("ans = [");
    while (ans != NULL) {
        printf("%d", ans->val);
        ans = ans->next;
        if (ans != NULL) {
            printf(",");
        }
    }
    printf("]");

    // 釋放記憶體
    freeList(l1);
    freeList(l2);
    freeResultList(ans);

    return 0;
}
